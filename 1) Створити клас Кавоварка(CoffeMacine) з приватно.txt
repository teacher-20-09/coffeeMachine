1) Створити клас Кавоварка(CoffeMacine) з приватною властивістю power(потужність),
   публічною властивістю water(кількість води в кавоварці) та повідомленням(alert)
   про створення кавоварки.

2) Створити екземпляр cf для класу СoffeMacine

3) Створити приватну властивість k(коефіцієнт теплоємності води) та два приватних
   методи getBoilTime(повертає час приготування кави за формулою -(k*water*80)/power)) та
   showMsg(виводить повідомлення про завершення процесу приготування кави)

4) Створити публічний метод run(запуск процесу приготування кави), в якому 
   з допомогою setTimeOut викликати метод showMsg через час getBoilTime(); 

5) Переписати метод getBoilTime у вигляді Function Expression і прив'язати до нього
   контекст this з допомогою методу bind

6) Створюєм графічний інтерфейс (div з id='cf', який містить div'и з класами
   currentWater, buttons та div з id='progress');

7) Створюєм приватну властивість timer(для зупинки setTimeout) і використовуємо timer в
   методі run при запуску setTimeout;

8) Створюєм публічний метод stop(зупиняє процес приготування кави), в цьому методі
   програмуєм: clearTimeout(timer) та виводим повідомлення про переривання процесу;

9) Програєм обробники оnclick для кнопок addWater, start та stop.

10) Створюєм progressbar(стрічку завантаження). Для елементів з id='progress' та 
    id='bar' задаєм відповідні стилі. Створюєм приватну властивість timerbar для
    методу setInterval.

11) В методі run реалізуєм графічний процес завантаження за допомогою методу setInterval.

12) В методі stop зупиняєм setInterval і задаєм нульову ширину для елемента bar

13) Створюєм приватну властивість ontimer, яка блокує повторний запуск методу run, якщо
	процес приготування кави вже запущений. Властивість ontimer використовується в
	методах run, stop та showMsg.

14) Публічну властивість water робимо приватною і створюємо для неї єдиний геттер-сеттер
    getsetWater(count), який буде перевіряти введене значення на число і контролюватиме кількості води(0-10) і не дозволить доливати воду в процесі приготування кави

15) Реалізуєм блокування методу run з виводом відповідного повідомлення, якщо
	кількість води в кавоварці дорівнює нулю. Після приготування кави кількість води
	в кавоварці повинна дорівнювати нулю.

16) Створюєм базовий клас Machine з приватною властивістю enable(включена/виключена) і
	двома публічними методами enabled(включає пристрій) та disabled(виключає пристрій)

17) Наслідуєм СoffeMachine від базового класу Machine, створюємо геттер getEnable для
    приватної властивості enable

18) Реалізуєм графічний інтерфейс кнопки on/off (div з класом enable)

19) Реалізуєм подію onclick на елементі onoff (при вимкненні кавоварки викликаєм метод stop)
	Модифікуєм метод run (якщо кавоварка вимкнена - блокуєм запуск процесу приготування кави і виводим відповідне повідомлення)

20) Переносимо приватну властивість power в батьківський клас Machine, створюєм для неї
    геттер getPower, наслідуєм через метод apply. Прив'язуєм через bind контекст this для методу getBoilTime і модифікуєм його під геттер getPower.

21) В функції CoffeeMachine в змінну parentEnabled записуєм батьківський метод enabled і
	створюєм власний метод enabled, який буде розширювати батьківський метод (додатково буде
	виводити повідомлення про включення кавоварки)